// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// IndGreater
IntegerMatrix IndGreater(NumericVector& x);
RcppExport SEXP _CRFpackage_IndGreater(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(IndGreater(x));
    return rcpp_result_gen;
END_RCPP
}
// IndLess
IntegerMatrix IndLess(NumericVector& x);
RcppExport SEXP _CRFpackage_IndLess(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(IndLess(x));
    return rcpp_result_gen;
END_RCPP
}
// IndEqual
IntegerMatrix IndEqual(NumericVector& x);
RcppExport SEXP _CRFpackage_IndEqual(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(IndEqual(x));
    return rcpp_result_gen;
END_RCPP
}
// Ind2
int Ind2(NumericVector& x, NumericVector& y, double& a, double& b);
RcppExport SEXP _CRFpackage_Ind2(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Ind2(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// risksetC
NumericMatrix risksetC(NumericVector& x, NumericVector& y);
RcppExport SEXP _CRFpackage_risksetC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(risksetC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// DeltaC
IntegerMatrix DeltaC(NumericVector& x, NumericVector& y);
RcppExport SEXP _CRFpackage_DeltaC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(DeltaC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// logLikC
double logLikC(const NumericVector& riskset1, const NumericVector& riskset2, const NumericVector& logtheta1, const NumericVector& logtheta2, const NumericVector& delta1, const NumericVector& delta2, const NumericVector& I1, const NumericVector& I2, const NumericVector& I3, const NumericVector& I4, const NumericVector& I5, const NumericVector& I6, const NumericVector w1, const NumericVector w2);
RcppExport SEXP _CRFpackage_logLikC(SEXP riskset1SEXP, SEXP riskset2SEXP, SEXP logtheta1SEXP, SEXP logtheta2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP I4SEXP, SEXP I5SEXP, SEXP I6SEXP, SEXP w1SEXP, SEXP w2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset1(riskset1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset2(riskset2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta1(logtheta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta2(logtheta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I4(I4SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I5(I5SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I6(I6SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w2(w2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikC(riskset1, riskset2, logtheta1, logtheta2, delta1, delta2, I1, I2, I3, I4, I5, I6, w1, w2));
    return rcpp_result_gen;
END_RCPP
}
// gradientC
NumericVector gradientC(const NumericVector& riskset1, const NumericVector& riskset2, const NumericVector& logtheta1, const NumericVector& logtheta2, const Rcpp::List& deriv, const int& df, const NumericVector& delta1, const NumericVector& delta2, const NumericVector& I1, const NumericVector& I2, const NumericVector& I3, const NumericVector& I4, const NumericVector& I5, const NumericVector& I6, const NumericVector w1, const NumericVector w2);
RcppExport SEXP _CRFpackage_gradientC(SEXP riskset1SEXP, SEXP riskset2SEXP, SEXP logtheta1SEXP, SEXP logtheta2SEXP, SEXP derivSEXP, SEXP dfSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP I4SEXP, SEXP I5SEXP, SEXP I6SEXP, SEXP w1SEXP, SEXP w2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset1(riskset1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset2(riskset2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta1(logtheta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta2(logtheta2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I4(I4SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I5(I5SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I6(I6SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w2(w2SEXP);
    rcpp_result_gen = Rcpp::wrap(gradientC(riskset1, riskset2, logtheta1, logtheta2, deriv, df, delta1, delta2, I1, I2, I3, I4, I5, I6, w1, w2));
    return rcpp_result_gen;
END_RCPP
}
// gradientPoly
NumericVector gradientPoly(const NumericVector& riskset1, const NumericVector& riskset2, const NumericVector& logtheta1, const NumericVector& logtheta2, const Rcpp::List& deriv, const int& df, const NumericVector& delta1, const NumericVector& delta2, const NumericVector& I1, const NumericVector& I2, const NumericVector& I3, const NumericVector& I4, const NumericVector& I5, const NumericVector& I6);
RcppExport SEXP _CRFpackage_gradientPoly(SEXP riskset1SEXP, SEXP riskset2SEXP, SEXP logtheta1SEXP, SEXP logtheta2SEXP, SEXP derivSEXP, SEXP dfSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP I4SEXP, SEXP I5SEXP, SEXP I6SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset1(riskset1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset2(riskset2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta1(logtheta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta2(logtheta2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I4(I4SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I5(I5SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I6(I6SEXP);
    rcpp_result_gen = Rcpp::wrap(gradientPoly(riskset1, riskset2, logtheta1, logtheta2, deriv, df, delta1, delta2, I1, I2, I3, I4, I5, I6));
    return rcpp_result_gen;
END_RCPP
}
// hessianC
NumericMatrix hessianC(const NumericVector& riskset1, const NumericVector& riskset2, const NumericVector& logtheta1, const NumericVector& logtheta2, const Rcpp::List& deriv, const int& df, const NumericVector& delta1, const NumericVector& delta2, const NumericVector& I1, const NumericVector& I2, const NumericVector& I3, const NumericVector& I4, const NumericVector w1, const NumericVector w2);
RcppExport SEXP _CRFpackage_hessianC(SEXP riskset1SEXP, SEXP riskset2SEXP, SEXP logtheta1SEXP, SEXP logtheta2SEXP, SEXP derivSEXP, SEXP dfSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP I4SEXP, SEXP w1SEXP, SEXP w2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset1(riskset1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset2(riskset2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta1(logtheta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta2(logtheta2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I4(I4SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w2(w2SEXP);
    rcpp_result_gen = Rcpp::wrap(hessianC(riskset1, riskset2, logtheta1, logtheta2, deriv, df, delta1, delta2, I1, I2, I3, I4, w1, w2));
    return rcpp_result_gen;
END_RCPP
}
// hessianPolyC
NumericMatrix hessianPolyC(const NumericVector& riskset1, const NumericVector& riskset2, const NumericVector& logtheta1, const NumericVector& logtheta2, const Rcpp::List& deriv, const int& df, const NumericVector& delta1, const NumericVector& delta2, const NumericVector& I1, const NumericVector& I2, const NumericVector& I3, const NumericVector& I4);
RcppExport SEXP _CRFpackage_hessianPolyC(SEXP riskset1SEXP, SEXP riskset2SEXP, SEXP logtheta1SEXP, SEXP logtheta2SEXP, SEXP derivSEXP, SEXP dfSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP I4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset1(riskset1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type riskset2(riskset2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta1(logtheta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logtheta2(logtheta2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< const int& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I4(I4SEXP);
    rcpp_result_gen = Rcpp::wrap(hessianPolyC(riskset1, riskset2, logtheta1, logtheta2, deriv, df, delta1, delta2, I1, I2, I3, I4));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CRFpackage_IndGreater", (DL_FUNC) &_CRFpackage_IndGreater, 1},
    {"_CRFpackage_IndLess", (DL_FUNC) &_CRFpackage_IndLess, 1},
    {"_CRFpackage_IndEqual", (DL_FUNC) &_CRFpackage_IndEqual, 1},
    {"_CRFpackage_Ind2", (DL_FUNC) &_CRFpackage_Ind2, 4},
    {"_CRFpackage_risksetC", (DL_FUNC) &_CRFpackage_risksetC, 2},
    {"_CRFpackage_DeltaC", (DL_FUNC) &_CRFpackage_DeltaC, 2},
    {"_CRFpackage_logLikC", (DL_FUNC) &_CRFpackage_logLikC, 14},
    {"_CRFpackage_gradientC", (DL_FUNC) &_CRFpackage_gradientC, 16},
    {"_CRFpackage_gradientPoly", (DL_FUNC) &_CRFpackage_gradientPoly, 14},
    {"_CRFpackage_hessianC", (DL_FUNC) &_CRFpackage_hessianC, 14},
    {"_CRFpackage_hessianPolyC", (DL_FUNC) &_CRFpackage_hessianPolyC, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_CRFpackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
